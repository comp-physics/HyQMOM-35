name: Julia Golden File Tests

on:
  push:
    branches: [main, master, julia, develop]
    paths:
      - 'HyQMOM.jl/**'
      - 'goldenfiles/**'
      - '.github/workflows/julia-golden-test.yml'
  pull_request:
    branches: [main, master, julia, develop]
    paths:
      - 'HyQMOM.jl/**'
      - 'goldenfiles/**'
      - '.github/workflows/julia-golden-test.yml'
  workflow_dispatch:

jobs:
  test:
    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        julia-version: ['1.9', '1.10']  # 1.9 (min), 1.10 (stable)
        # Note: Julia 1.12 currently has OpenSSL_jll precompilation issues on GitHub Actions
        # Will re-enable when resolved: https://github.com/JuliaLang/julia/issues/xxxxx
        os: [ubuntu-latest]
        # Optional: Add macOS for development testing
        # os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true  # Ensure golden files are downloaded if using Git LFS
      
      - name: Check golden files exist
        run: |
          echo "Checking for MATLAB golden files..."
          ls -lh goldenfiles/
          if [ ! -f "goldenfiles/goldenfile_mpi_1ranks_Np20_tmax100.mat" ]; then
            echo "FAIL Golden file not found!"
            exit 1
          fi
          echo "OK Golden files found"
      
      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
          arch: x64
      
      - name: Check Julia environment
        run: |
          julia --version
          julia -e 'using InteractiveUtils; versioninfo()'
      
      - name: Install MPI (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mpich libmpich-dev
          which mpiexec
          mpiexec --version
      
      - name: Install MPI (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install mpich
          which mpiexec
          mpiexec --version
      
      - name: Remove GLMakie (headless CI environment)
        working-directory: HyQMOM.jl
        env:
          HYQMOM_SKIP_PLOTTING: "true"
        run: |
          echo "Removing GLMakie to avoid X11/GLFW errors in CI..."
          # Remove GLMakie from Project.toml in multiple sections
          if grep -q "GLMakie" Project.toml; then
            echo "Found GLMakie in Project.toml, removing from all sections..."
            # Remove from [deps]
            sed -i.bak '/^GLMakie = /d' Project.toml
            # Remove from [compat]
            sed -i.bak '/^GLMakie = /d' Project.toml
            # Remove GLMakie from [targets] test array
            sed -i.bak 's/, "GLMakie"//g' Project.toml
            sed -i.bak 's/"GLMakie", //g' Project.toml
            sed -i.bak 's/"GLMakie"//g' Project.toml
            echo "GLMakie removed from Project.toml"
            echo "Modified Project.toml:"
            cat Project.toml
          else
            echo "GLMakie not found in Project.toml"
          fi
          # Remove Manifest to force clean resolve
          if [ -f Manifest.toml ]; then
            echo "Cleaning Manifest.toml to force re-resolve..."
            rm -f Manifest.toml
          fi
          echo "Ready to install without GLMakie"
      
      - name: Install Julia dependencies
        working-directory: HyQMOM.jl
        env:
          HYQMOM_SKIP_PLOTTING: "true"
        run: |
          julia --project --color=yes -e '
            using Pkg
            
            println("Julia version: ", VERSION)
            println("Project: ", Base.active_project())
            println()
            
            # Update registry
            println("Updating package registry...")
            try
              Pkg.Registry.update()
              println("OK Registry updated")
            catch e
              @warn "Registry update failed, continuing anyway" exception=(e, catch_backtrace())
            end
            println()
            
            # Instantiate packages
            println("Installing packages...")
            Pkg.instantiate(verbose=true)
            println()
            
            # Resolve dependencies
            println("Resolving dependencies...")
            Pkg.resolve()
            println()
            
            # Precompile
            println("Precompiling packages...")
            Pkg.precompile()
            println()
            
            # Show final status
            println("Package status:")
            Pkg.status()
            println()
            println("OK All packages installed successfully")
          '
      
      - name: Build MPI.jl
        working-directory: HyQMOM.jl
        run: |
          julia --project -e '
            using Pkg
            
            # Build MPI with verbose output
            Pkg.build("MPI", verbose=true)
            
            # Test MPI loading
            using MPI
            println("OK MPI.jl loaded successfully")
            
            # Verify MPI binary
            println("MPI implementation: ", MPI.MPI_LIBRARY_VERSION_STRING)
          '
      
      - name: Run unit tests
        working-directory: HyQMOM.jl
        run: |
          julia --project --color=yes -e '
            using Pkg
            Pkg.test(coverage=true)
          '
      
      - name: Run golden file test (1 rank)
        working-directory: HyQMOM.jl
        run: |
          echo "=================================================================="
          echo "Testing Julia against MATLAB golden file (1 MPI rank)"
          echo "=================================================================="
          julia --project test/test_golden_files.jl
      
      - name: Test MPI execution (1 rank)
        working-directory: HyQMOM.jl
        run: |
          echo "=================================================================="
          echo "Testing with MPI (1 rank)"
          echo "=================================================================="
          mpiexec -n 1 julia --project test/test_golden_files.jl
      
      - name: Generate test report
        if: always()
        working-directory: HyQMOM.jl
        run: |
          julia --project -e '
            println("="^70)
            println("JULIA GOLDEN FILE TEST SUMMARY")
            println("="^70)
            println("Julia version: ", VERSION)
            println("OS: ", Sys.KERNEL)
            println("Architecture: ", Sys.ARCH)
            
            # Check if test passed by looking for output file
            if isfile("test_results.txt")
              println("\nOK Tests completed successfully")
              println(read("test_results.txt", String))
            else
              println("\nWARNING  Test results not found")
            end
            println("="^70)
          '
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-julia-${{ matrix.julia-version }}-${{ matrix.os }}
          path: |
            HyQMOM.jl/test_results.txt
            HyQMOM.jl/test/*.log
          if-no-files-found: ignore
      
      - name: Process coverage
        if: matrix.julia-version == '1' && matrix.os == 'ubuntu-latest'
        working-directory: HyQMOM.jl
        run: |
          julia --project -e '
            using Pkg
            Pkg.add("Coverage")
            using Coverage
            coverage = process_folder()
            covered_lines, total_lines = get_summary(coverage)
            percentage = covered_lines / total_lines * 100
            println("Coverage: ", round(percentage, digits=2), "%")
            println("Covered lines: ", covered_lines, " / ", total_lines)
          '


name: Comprehensive Validation (MATLAB + Julia)

on:
  push:
    branches: [main, master, julia, develop]
  pull_request:
    branches: [main, master, julia, develop]
  workflow_dispatch:

jobs:
  # Job 1: Ensure MATLAB golden files are up to date
  validate-matlab:
    name: Validate MATLAB Implementation
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          cache: true
          products: Parallel_Computing_Toolbox
      
      - name: Check golden files exist
        run: |
          echo "Checking MATLAB golden files..."
          ls -lh goldenfiles/
          file_count=$(ls -1 goldenfiles/goldenfile_*.mat 2>/dev/null | wc -l)
          echo "Found $file_count golden files"
          if [ "$file_count" -lt 1 ]; then
            echo "❌ No golden files found!"
            exit 1
          fi
          echo "✅ Golden files present"
      
      - name: Run MATLAB tests
        uses: matlab-actions/run-command@v2
        with:
          command: |
            cd tests
            exit_code = run_all_tests();
            if exit_code ~= 0
              error('MATLAB tests failed');
            end
            fprintf('✅ MATLAB tests passed\n');
      
      - name: Verify golden file integrity
        uses: matlab-actions/run-command@v2
        with:
          command: |
            % Load and validate golden file structure
            golden_file = 'goldenfiles/goldenfile_mpi_1ranks_Np20_tmax100.mat';
            if ~exist(golden_file, 'file')
              error('Golden file not found: %s', golden_file);
            end
            
            data = load(golden_file);
            if ~isfield(data, 'golden_data')
              error('Invalid golden file structure: missing golden_data');
            end
            
            gd = data.golden_data;
            required_fields = {'moments', 'parameters', 'grid'};
            for i = 1:length(required_fields)
              if ~isfield(gd, required_fields{i})
                error('Missing field: %s', required_fields{i});
              end
            end
            
            if ~isfield(gd.moments, 'M')
              error('Missing moment array M');
            end
            
            M = gd.moments.M;
            fprintf('Golden file validation:\n');
            fprintf('  Size: %dx%dx%d\n', size(M));
            fprintf('  Np: %d\n', gd.parameters.Np);
            fprintf('  tmax: %.2f\n', gd.parameters.tmax);
            fprintf('  Final time: %.6f\n', gd.parameters.final_time);
            fprintf('  Time steps: %d\n', gd.parameters.time_steps);
            fprintf('✅ Golden file structure validated\n');
      
      - name: Upload MATLAB validation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: matlab-validation-results
          path: test-results/

  # Job 2: Test Julia against MATLAB golden files
  validate-julia:
    name: Validate Julia vs MATLAB Golden Files
    needs: validate-matlab  # Only run if MATLAB validation passes
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        test-type: ['unit', 'golden', 'mpi']
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Setup Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1'  # Use latest stable
          arch: x64
      
      - name: Install MPI
        run: |
          sudo apt-get update
          sudo apt-get install -y mpich libmpich-dev
          mpiexec --version
      
      - name: Cache Julia packages
        uses: actions/cache@v4
        with:
          path: ~/.julia
          key: ${{ runner.os }}-julia-1-${{ hashFiles('RodneyHQMOM.jl/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-julia-1-
      
      - name: Install dependencies
        working-directory: RodneyHQMOM.jl
        run: |
          # Retry logic for robustness
          for i in {1..3}; do
            echo "════════════════════════════════════════════════════════════"
            echo "Package installation attempt $i/3"
            echo "════════════════════════════════════════════════════════════"
            
            # On retry, clean up potentially corrupted cache
            if [ $i -gt 1 ]; then
              echo "Cleaning up package cache before retry..."
              julia --project -e 'using Pkg; Pkg.gc(; collect_delay=0.0)' || true
              rm -rf ~/.julia/compiled/v* || true
              echo "Cache cleaned"
            fi
            
            if julia --project --color=yes -e '
              using Pkg
              
              println("Julia version: ", VERSION)
              println("Project: ", Base.active_project())
              println()
              
              # Update registry
              println("Updating package registry...")
              try
                Pkg.Registry.update()
                println("✓ Registry updated")
              catch e
                @warn "Registry update failed, continuing anyway" exception=(e, catch_backtrace())
              end
              println()
              
              # Install packages
              println("Installing packages...")
              Pkg.instantiate(verbose=true)
              println()
              
              println("Resolving dependencies...")
              Pkg.resolve()
              println()
              
              println("Precompiling packages...")
              Pkg.precompile()
              println()
              
              println("Package status:")
              Pkg.status()
              println()
              println("✓ All packages installed successfully")
            '; then
              echo "✓ Installation successful on attempt $i"
              break
            else
              echo "⚠ Attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "Cleaning precompile cache..."
                rm -rf ~/.julia/compiled/v* || true
                echo "Waiting 15 seconds before retry..."
                sleep 15
              fi
            fi
            
            if [ $i -eq 3 ]; then
              echo "════════════════════════════════════════════════════════════"
              echo "❌ Package installation failed after 3 attempts"
              echo "════════════════════════════════════════════════════════════"
              exit 1
            fi
          done
          
          # Build MPI separately
          julia --project -e '
            using Pkg
            Pkg.build("MPI", verbose=true)
            using MPI
            println("✓ MPI.jl ready")
          '
      
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        working-directory: RodneyHQMOM.jl
        run: |
          julia --project --color=yes -e 'using Pkg; Pkg.test()'
      
      - name: Run golden file test
        if: matrix.test-type == 'golden'
        working-directory: RodneyHQMOM.jl
        run: |
          echo "=================================================================="
          echo "GOLDEN FILE TEST: Julia vs MATLAB"
          echo "=================================================================="
          julia --project test/test_matlab_golden.jl
          exit_code=$?
          
          if [ $exit_code -eq 0 ]; then
            echo "✅ Golden file test PASSED"
          else
            echo "❌ Golden file test FAILED"
            exit 1
          fi
      
      - name: Run MPI golden file test
        if: matrix.test-type == 'mpi'
        working-directory: RodneyHQMOM.jl
        run: |
          echo "=================================================================="
          echo "MPI GOLDEN FILE TEST: Julia vs MATLAB (1 rank)"
          echo "=================================================================="
          mpiexec -n 1 julia --project test/test_matlab_golden.jl
          exit_code=$?
          
          if [ $exit_code -eq 0 ]; then
            echo "✅ MPI golden file test PASSED"
          else
            echo "❌ MPI golden file test FAILED"
            exit 1
          fi
      
      - name: Generate comparison report
        if: always() && matrix.test-type == 'golden'
        working-directory: RodneyHQMOM.jl
        run: |
          julia --project -e '
            println("="^70)
            println("JULIA vs MATLAB COMPARISON SUMMARY")
            println("="^70)
            println()
            println("Environment:")
            println("  Julia version: ", VERSION)
            println("  OS: ", Sys.KERNEL, " ", Sys.ARCH)
            println()
            println("Golden file test compares:")
            println("  ✓ Grid size: 20×20")
            println("  ✓ Time range: 0.0 → 0.1")
            println("  ✓ Moments: 35 components")
            println("  ✓ MPI ranks: 1")
            println()
            println("Expected results:")
            println("  Max absolute error: < 1e-8")
            println("  Max relative error: < 1e-6")
            println("  Typical agreement: ~1e-15 (machine precision)")
            println("="^70)
          '
      
      - name: Upload Julia test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: julia-test-results-${{ matrix.test-type }}
          path: RodneyHQMOM.jl/test/*.log
          if-no-files-found: ignore

  # Job 3: Final validation report
  report:
    name: Generate Validation Report
    needs: [validate-matlab, validate-julia]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: validation-results
      
      - name: Generate summary report
        run: |
          echo "# Validation Report" > validation_report.md
          echo "" >> validation_report.md
          echo "## Test Summary" >> validation_report.md
          echo "" >> validation_report.md
          echo "- **Date**: $(date)" >> validation_report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> validation_report.md
          echo "- **Commit**: ${{ github.sha }}" >> validation_report.md
          echo "" >> validation_report.md
          
          if [ "${{ needs.validate-matlab.result }}" == "success" ]; then
            echo "✅ MATLAB validation: **PASSED**" >> validation_report.md
          else
            echo "❌ MATLAB validation: **FAILED**" >> validation_report.md
          fi
          
          if [ "${{ needs.validate-julia.result }}" == "success" ]; then
            echo "✅ Julia validation: **PASSED**" >> validation_report.md
          else
            echo "❌ Julia validation: **FAILED**" >> validation_report.md
          fi
          
          echo "" >> validation_report.md
          echo "## Details" >> validation_report.md
          echo "" >> validation_report.md
          echo "Julia tests validate that the Julia implementation produces" >> validation_report.md
          echo "identical results to the MATLAB reference implementation by" >> validation_report.md
          echo "comparing against pre-generated golden files." >> validation_report.md
          echo "" >> validation_report.md
          echo "Expected agreement: machine precision (~10⁻¹⁵)" >> validation_report.md
          
          cat validation_report.md
      
      - name: Upload validation report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation_report.md
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });


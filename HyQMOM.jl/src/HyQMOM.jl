"""
    HyQMOM

3D Hyperbolic Quadrature Method of Moments (HyQMOM) solver with MPI parallelization.

This package implements a moment-based kinetic solver for the Boltzmann equation 
with BGK collision operator, using domain decomposition for parallel execution.
"""
module HyQMOM

using LinearAlgebra
using StaticArrays
using MPI
using Printf
using JLD2  # Always needed for snapshot I/O

# Export main entry points
export run_simulation, simulation_runner, run_simulation_with_snapshots

# Export visualization functions
export interactive_3d_timeseries_streaming

# Export initial condition utilities
export CubicRegion, initialize_moment_field, initialize_moment_field_mpi, crossing_jets_ic

# Export key functions for testing
export InitializeM4_35, M2CS4_35, Moments5_3D, hyqmom_3D
export realizability, realizable_2D, realizable_3D
export closure_and_eigenvalues, eigenvalues6_hyperbolic_3D, eigenvalues6z_hyperbolic_3D
export Flux_closure35_and_realizable_3D
export flux_HLL, pas_HLL, collision35
export moment_idx, M4_to_vars, M5_to_vars
export delta2star3D, delta2star3D_permutation, jacobian6, M4toC4_3D, C4toM4_3D, S4toC4_3D_r, C5toM5_3D
export axis_moment_slice
export setup_mpi_cartesian_3d, halo_exchange_3d!, apply_flux_update_3d!
export compute_halo_fluxes_and_wavespeeds_3d!
export compute_standardized_field, compute_central_field, get_standardized_moment, get_central_moment

# Autogenerated code
include("autogen/delta2star3D.jl")
include("autogen/delta2star3D_permutation.jl")
include("autogen/delta2starchol_L3.jl")
include("autogen/rootsR.jl")
include("autogen/rootsR_X_Y.jl")
include("autogen/jacobian6.jl")
include("autogen/bound_minor1.jl")
include("autogen/lower_bound_S220.jl")
include("autogen/C4toM4_3D.jl")
include("autogen/C5toM5_3D.jl")
include("autogen/M4toC4_3D.jl")
include("autogen/S4toC4_3D_r.jl")

# Moment operations
include("moments/InitializeM4_35.jl")
include("moments/M2CS4_35.jl")
include("moments/Moments5_3D.jl")
include("moments/hyqmom_3D.jl")
include("moments/enforce_univariate.jl")

# Realizability
include("realizability/realizability.jl")
include("realizability/edge_corner_correction.jl")

# Numerics
include("numerics/closure_and_eigenvalues.jl")
include("numerics/compute_jacobian_eigenvalues.jl")
include("numerics/eigenvalues6_hyperbolic_3D.jl")
include("numerics/eigenvalues6z_hyperbolic_3D.jl")
include("numerics/Flux_closure35_and_realizable_3D.jl")
include("numerics/collision35.jl")
include("numerics/flux_HLL.jl")
include("numerics/pas_HLL.jl")
include("numerics/apply_flux_update.jl")
include("numerics/apply_flux_update_3d.jl")

# MPI utilities
include("mpi/mpi_utils.jl")
include("mpi/setup_mpi_cartesian_2d.jl")
include("mpi/setup_mpi_cartesian_3d.jl")
include("mpi/halo_exchange_2d.jl")
include("mpi/halo_exchange_3d.jl")
include("mpi/compute_halo_fluxes_and_wavespeeds.jl")
include("mpi/compute_halo_fluxes_and_wavespeeds_3d.jl")

# Utilities
include("utils/moment_idx.jl")
include("utils/axis_moment_slice.jl")
include("utils/moment_array_utils.jl")
include("utils/diagnostics.jl")
include("utils/compute_standardized_field.jl")

# Initial conditions
include("initial_conditions.jl")

# Main simulation
include("simulation_runner.jl")

# Visualization (GLMakie only) - optional
# Skip in CI or if explicitly disabled
const SKIP_PLOTTING = get(ENV, "HYQMOM_SKIP_PLOTTING", "false") == "true" || 
                      get(ENV, "CI", "false") == "true"

# Check if visualization dependencies are available
const VIZ_AVAILABLE = !SKIP_PLOTTING && 
    try
        # Check for visualization-specific packages (NOT JLD2 - that's always needed)
        Base.find_package("GLMakie") !== nothing &&
        Base.find_package("FileIO") !== nothing &&
        Base.find_package("ColorSchemes") !== nothing &&
        Base.find_package("LaTeXStrings") !== nothing
    catch
        false
    end

if VIZ_AVAILABLE
    try
        # Load visualization dependencies as optional
        @eval begin
            import GLMakie
            import FileIO
            import ColorSchemes
            using LaTeXStrings  # 'using' to make @L_str macro available
            import Dates
            include($(joinpath(@__DIR__, "visualization", "interactive_3d_timeseries_streaming.jl")))
        end
    catch e
        if !SKIP_PLOTTING
            @warn "Failed to load visualization module" exception=(e, catch_backtrace())
        end
    end
elseif !SKIP_PLOTTING
    @info "Visualization packages not available - visualization disabled. Install with: using Pkg; Pkg.add([\"GLMakie\", \"FileIO\", \"ColorSchemes\", \"LaTeXStrings\"])"
end

end # module

"""
    HyQMOM

3D Hyperbolic Quadrature Method of Moments (HyQMOM) solver with MPI parallelization.

This package implements a moment-based kinetic solver for the Boltzmann equation 
with BGK collision operator, using domain decomposition for parallel execution.
"""
module HyQMOM

using LinearAlgebra
using StaticArrays
using MPI
using Printf

# Export main entry points
export run_simulation, simulation_runner

# Export visualization functions
export plot_final_results

# Export key functions for testing
export InitializeM4_35, M2CS4_35, Moments5_3D, hyqmom_3D
export realizability, realizable_2D, realizable_3D
export closure_and_eigenvalues, eigenvalues6_hyperbolic_3D
export Flux_closure35_and_realizable_3D
export flux_HLL, pas_HLL, collision35
export moment_idx, M4_to_vars, M5_to_vars
export delta2star3D, delta2star3D_permutation, jacobian6, M4toC4_3D, C4toM4_3D, S4toC4_3D_r, C5toM5_3D
export axis_moment_slice

# Autogenerated code
include("autogen/delta2star3D.jl")
include("autogen/delta2star3D_permutation.jl")
include("autogen/delta2starchol_L3.jl")
include("autogen/rootsR.jl")
include("autogen/rootsR_X_Y.jl")
include("autogen/jacobian6.jl")
include("autogen/bound_minor1.jl")
include("autogen/lower_bound_S220.jl")
include("autogen/C4toM4_3D.jl")
include("autogen/C5toM5_3D.jl")
include("autogen/M4toC4_3D.jl")
include("autogen/S4toC4_3D_r.jl")

# Moment operations
include("moments/InitializeM4_35.jl")
include("moments/M2CS4_35.jl")
include("moments/Moments5_3D.jl")
include("moments/hyqmom_3D.jl")
include("moments/enforce_univariate.jl")

# Realizability
include("realizability/realizability.jl")
include("realizability/edge_corner_correction.jl")

# Numerics
include("numerics/closure_and_eigenvalues.jl")
include("numerics/compute_jacobian_eigenvalues.jl")
include("numerics/eigenvalues6_hyperbolic_3D.jl")
include("numerics/Flux_closure35_and_realizable_3D.jl")
include("numerics/collision35.jl")
include("numerics/flux_HLL.jl")
include("numerics/pas_HLL.jl")
include("numerics/apply_flux_update.jl")

# MPI utilities
include("mpi/mpi_utils.jl")
include("mpi/setup_mpi_cartesian_2d.jl")
include("mpi/halo_exchange_2d.jl")
include("mpi/compute_halo_fluxes_and_wavespeeds.jl")

# Utilities
include("utils/moment_idx.jl")
include("utils/axis_moment_slice.jl")
include("utils/moment_array_utils.jl")
include("utils/diagnostics.jl")

# Main simulation
include("simulation_runner.jl")

# Visualization (requires PyPlot and ColorSchemes) - optional
# Skip in CI or if PyPlot is not available
const SKIP_PLOTTING = get(ENV, "HYQMOM_SKIP_PLOTTING", "false") == "true" || 
                      get(ENV, "CI", "false") == "true"

if !SKIP_PLOTTING
    try
        include("visualization/plotting.jl")
    catch e
        if e isa ErrorException && occursin("PyPlot", string(e))
            @warn "PyPlot not available - plotting functions disabled"
        else
            rethrow(e)
        end
    end
else
    @info "Plotting disabled (CI mode or HYQMOM_SKIP_PLOTTING=true)"
end

end # module

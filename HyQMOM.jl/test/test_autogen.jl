const TOL = 1e-10

@testset "Autogenerated Code" begin
    
    @testset "M4toC4_3D consistency" begin
        rho = 1.0
        u, v, w = 0.1, 0.2, 0.3
        C200, C110, C101 = 1.2, 0.3, 0.2
        C020, C011, C002 = 1.5, 0.4, 1.8
        
        M = InitializeM4_35(rho, u, v, w, C200, C110, C101, C020, C011, C002)
        
        # Extract moments
        M000, M100, M010, M001, M200, M110, M101, M020, M011, M002,
        M300, M210, M201, M120, M111, M102, M030, M021, M012, M003,
        M400, M310, M301, M220, M211, M202, M130, M121, M112, M103, M040, M031, M022, M013, M004 =
            M4_to_vars(M)
        
        C_array = M4toC4_3D(M000, M100, M010, M001, M200, M110, M101, M020, M011, M002,
                            M300, M210, M201, M120, M111, M102, M030, M021, M012, M003,
                            M400, M310, M301, M220, M211, M202, M130, M121, M112, M103, M040, M031, M022, M013, M004)
        
        @test all(isfinite.(C_array))
        @test size(C_array) == (5, 5, 5)
    end
    
    @testset "S4toC4_3D_r consistency" begin
        C200, C110, C101 = 1.2, 0.3, 0.2
        C020, C011, C002 = 1.5, 0.4, 1.8
        
        # Gaussian standardized moments
        S300=0.0; S210=0.0; S201=0.0; S120=0.0; S111=0.0; S102=0.0; S030=0.0; S021=0.0; S012=0.0; S003=0.0
        S400=3.0; S310=0.0; S301=0.0; S220=1.0; S211=0.0; S202=1.0
        S130=0.0; S121=0.0; S112=0.0; S103=0.0; S040=3.0; S031=0.0; S022=1.0; S013=0.0; S004=3.0
        
        C_array = S4toC4_3D_r(C200, C110, C101, C020, C011, C002,
                              S300, S210, S201, S120, S111, S102, S030, S021, S012, S003,
                              S400, S310, S301, S220, S211, S202, S130, S121, S112, S103,
                              S040, S031, S022, S013, S004)
        
        @test all(isfinite.(C_array))
        @test size(C_array) == (5, 5, 5)
    end
    
    @testset "C4toM4_3D produces output" begin
        rho = 2.0
        u, v, w = 0.5, -0.3, 0.1
        C200, C020, C002 = 1.2, 1.5, 1.8
        C110, C101, C011 = 0.3, -0.2, 0.4
        
        M_orig = InitializeM4_35(rho, u, v, w, C200, C110, C101, C020, C011, C002)
        
        M000, M100, M010, M001, M200, M110, M101, M020, M011, M002,
        M300, M210, M201, M120, M111, M102, M030, M021, M012, M003,
        M400, M310, M301, M220, M211, M202, M130, M121, M112, M103, M040, M031, M022, M013, M004 =
            M4_to_vars(M_orig)
        
        C_array = M4toC4_3D(M000, M100, M010, M001, M200, M110, M101, M020, M011, M002,
                            M300, M210, M201, M120, M111, M102, M030, M021, M012, M003,
                            M400, M310, M301, M220, M211, M202, M130, M121, M112, M103, M040, M031, M022, M013, M004)
        
        # Convert back
        C000, C100, C010, C001, C200_out, C110_out, C101_out, C020_out, C011_out, C002_out,
        C300, C210, C201, C120, C111, C102, C030, C021, C012, C003,
        C400, C310, C301, C220, C211, C202, C130, C121, C112, C103, C040, C031, C022, C013, C004 =
            M4_to_vars(C_array)
        
        M_array = C4toM4_3D(M000, M100, M010, M001,
                            C200_out, C110_out, C101_out, C020_out, C011_out, C002_out,
                            C300, C210, C201, C120, C111, C102, C030, C021, C012, C003,
                            C400, C310, C301, C220, C211, C202, C130, C121, C112, C103, C040, C031, C022, C013, C004)
        
        @test all(isfinite.(M_array))
        @test size(M_array) == (5, 5, 5)
    end
    
    @testset "delta2star3D produces output" begin
        # delta2star3D takes 28 arguments (all standardized moments)
        S300, S400 = 0.1, 3.0
        S110, S210, S310 = 0.5, 0.1, 0.2
        S120, S220 = 0.15, 1.0
        S030, S130, S040 = 0.2, 0.25, 3.0
        S101, S201, S301 = 0.3, 0.12, 0.18
        S102, S202 = 0.16, 1.1
        S003, S103, S004 = 0.22, 0.28, 3.0
        S011, S111, S211 = 0.4, 0.35, 0.14
        S021, S121, S031 = 0.26, 0.17, 0.29
        S012, S112, S013 = 0.24, 0.19, 0.31
        S022 = 1.2
        
        result = delta2star3D(S300, S400, S110, S210, S310, S120, S220, S030, S130, S040,
                              S101, S201, S301, S102, S202, S003, S103, S004, S011, S111,
                              S211, S021, S121, S031, S012, S112, S013, S022)
        
        @test size(result) == (6, 6)
        @test all(isfinite.(result))
    end
    
    @testset "jacobian6 produces output" begin
        # jacobian6 takes 15 arguments (univariate moments)
        m00, m01, m02, m03, m04 = 1.0, 0.0, 1.0, 0.0, 3.0
        m10, m11, m12, m13 = 0.0, 0.5, 0.0, 0.2
        m20, m21, m22 = 1.0, 0.0, 1.5
        m30, m31 = 0.0, 0.3
        m40 = 3.0
        
        J = jacobian6(m00, m01, m02, m03, m04, m10, m11, m12, m13, m20, m21, m22, m30, m31, m40)
        
        @test size(J) == (6, 6)
        @test all(isfinite.(J))
    end
end
